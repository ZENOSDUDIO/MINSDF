/* Copyright (c) 2009 Bill Davidsen */

Type.registerNamespace("SCS"); SCS.Toolbar = function(a) { SCS.Toolbar.initializeBase(this, [a]); this._buttons = []; this._itemData = {}; this._selectedIndex = -1; this._lastSelectedIndex = -1; this._btnCss = ""; this._btnCssEnabled = ""; this._btnCssDisabled = ""; this._btnCssSelected = ""; this._selectionMode = "Off"; this._buttonClickedHandler; this._util }; SCS.Toolbar.prototype = { initialize: function() { SCS.Toolbar.callBaseMethod(this, 'initialize'); this._buttonClickedHandler = Function.createDelegate(this, this._button_onClick); this._util = new SCS.Util(); var a = this.get_element().childNodes; for (var i = 0; i < a.length; i++) { var b = a[i]; if (b.nodeType != 3 && b.tagName == "DIV") this._addButton(b, this._itemData[i], i) } }, dispose: function() { this._itemData = null; this._buttons = null; this._buttonClickedHandler = null; this._util = null; SCS.Toolbar.callBaseMethod(this, 'dispose') }, getButtonByIndex: function(a) { return this._buttons[a] }, getButtonById: function(a) { for (var i = 0; i < this._buttons.length; i++) if (this._buttons[i].get_element().id === a) return this._buttons[i]; return null }, getButtonByText: function(a) { a = a.toUpperCase(); for (var i = 0; i < this._buttons.length; i++) if (this._buttons[i].get_text().toUpperCase() === a) return this._buttons[i]; return null }, setItemSelected: function(a, b) { var c = this._selectionMode; if (c != "Multiple") this.clearSelections(); if (c != "Off") { var d = this._buttons[a]; if (c == "Single") d._selected = b; else d._selected = !d._selected; d._setSelectedCss(d._selected); if (d._selected) this._lastSelectedIndex = a } }, clearSelections: function() { for (var i = 0; i < this._buttons.length; i++) { this._buttons[i]._selected = false; this._buttons[i]._setSelectedCss(false) } }, _addButton: function(a, b, c) { var d = { "parent": this, "setupData": b, "index": c }; var e = { "clicked": this._buttonClickedHandler }; b.css = this._util.getProp(b, "css", this._btnCss); b.cssEnabled = this._util.getProp(b, "cssEnabled", this._btnCssEnabled); b.cssDisabled = this._util.getProp(b, "cssDisabled", this._btnCssDisabled); b.cssSelected = this._util.getProp(b, "cssSelected", this._btnCssSelected); var f = $create(SCS.ToolbarButton, d, e, null, a); Array.add(this._buttons, f); return f }, _button_onClick: function(a, b) { b.set_oldIndex(this._selectedIndex); this.raiseButtonClicked(b) }, add_buttonClicked: function(a) { this.get_events().addHandler('buttonClicked', a) }, remove_buttonClicked: function(a) { this.get_events().removeHandler('buttonClicked', a) }, raiseButtonClicked: function(a) { var b = this.get_events().getHandler('buttonClicked'); if (b) { b(this, a); if (!a.get_cancel()) this._selectedIndex = a.get_selectedIndex() } }, get_items: function() { return this._buttons }, get_itemData: function() { return this._itemData }, set_itemData: function(a) { this._itemData = a }, get_selectedIndex: function() { return this._selectedIndex }, get_buttonCssClass: function() { return this._btnCss }, set_buttonCssClass: function(a) { this._btnCss = a }, get_buttonCssClassEnabled: function() { return this._btnCssEnabled }, set_buttonCssClassEnabled: function(a) { this._btnCssEnabled = a }, get_buttonCssClassDisabled: function() { return this._btnCssDisabled }, set_buttonCssClassDisabled: function(a) { this._btnCssDisabled = a }, get_buttonCssClassSelected: function() { return this._btnCssSelected }, set_buttonCssClassSelected: function(a) { this._btnCssSelected = a }, get_selectionMode: function() { return this._selectionMode }, set_selectionMode: function(a) { this._selectionMode = a } }; SCS.Toolbar.registerClass('SCS.Toolbar', Sys.UI.Behavior); SCS.ToolbarButton = function(a) { SCS.ToolbarButton.initializeBase(this, [a]); this._index = -1; this._parent; this._util; this._anchor; this._confirmMsg = ""; this._css = ""; this._cssEnabled = ""; this._cssDisabled = ""; this._cssSelected = ""; this._enabled = true; this._selected = false; this._setupData = ""; this._isInit = true; this._imageUrl = ""; this._disabledImageUrl = ""; this._confirmHandler }; SCS.ToolbarButton.prototype = { initialize: function() { SCS.ToolbarButton.callBaseMethod(this, 'initialize'); this._util = this._parent._util; var a = this._setupData; this._confirmMsg = this._util.getProp(a, "confirmMessage", ""); this._css = a.css; this._cssEnabled = a.cssEnabled; this._cssDisabled = a.cssDisabled; this._cssSelected = a.cssSelected; this._anchor = this._util.getFirstChild(this.get_element()); this.set_enabled(a.enabled); if (this._enabled) { this._disabledImageUrl = this._util.getProp(a, "disabledImageUrl", ""); this._imageUrl = this._anchor.style.backgroundImage } else { this._disabledImageUrl = this._anchor.style.backgroundImage; this._imageUrl = this._util.getProp(a, "imageUrl", "") } this._confirmHandler = Function.createDelegate(this, this._onButtonClick); $addHandler(this.get_element(), "click", this._confirmHandler); this._setupData = null; this._clearChanges(); this._isInit = false }, dispose: function() { $removeHandler(this.get_element(), "click", this._confirmHandler); this._confirmHandler = null; this._util = null; SCS.ToolbarButton.callBaseMethod(this, 'dispose') }, _saveChange: function(a, b) { if (this._isInit) return; var c = this._util.getSibling(this.get_element(), "input", 100); var d = this._removeChange(c.value, a); var e = String.format("{0}~{1},{2}", this.get_element().id, a, b); Array.add(d, e); c.value = d.join("|") }, _removeChange: function(a, b) { if (!a) return []; var c = a.split("|"); var d = this.get_element().id; for (var i = 0; i < c.length; i++) { if (c[i].split(",")[0] == (d + "~" + b)) { Array.remove(c, c[i]); break } } return c }, _clearChanges: function() { var a = this._util.getSibling(this.get_element(), "input", 100); a.value = "" }, _swapClasses: function(a, b) { if (this._isInit) return; var c = this.get_element(); Sys.UI.DomElement.removeCssClass(c, a); Sys.UI.DomElement.addCssClass(c, b) }, _setImage: function(a) { if (this._isInit || this._disabledImageUrl.length == 0) return; var b = (a) ? this._imageUrl : this._disabledImageUrl; if (b.substring(0, 3).toUpperCase() != "URL") b = String.format("url({0})", b); this._anchor.style.backgroundImage = b }, _setSelectedCss: function(a) { try { var b = (a) ? this._cssSelected : this._cssEnabled; var c = (a) ? this._cssEnabled : this._cssSelected; this._swapClasses(c, b) } catch (e) { } }, _setEnabled: function(a) { try { var b = (a) ? this._cssEnabled : this._cssDisabled; var c = (a) ? this._cssDisabled : this._cssEnabled; this._swapClasses(c, b) } catch (e) { } this._setImage(a); var d = this._anchor; if (d.title.length > 0) { if (a) d.title = d.title.replace(" (disabled)", ""); else d.title += " (disabled)" } d.disabled = !a; d.href = (!a) ? "javascript:void(0);" : d.href }, add_clicked: function(a) { this.get_events().addHandler('clicked', a) }, remove_clicked: function(a) { this.get_events().removeHandler('clicked', a) }, raiseClicked: function(a) { var b = this.get_events().getHandler('clicked'); if (b) b(this, a) }, _onButtonClick: function(e) { if (!this.get_enabled()) return false; var a = new SCS.ToolbarClickEventArgs(-1, this._index); this.raiseClicked(a); if (a.get_cancel()) return false; if (this._confirmMsg.length > 0 && !confirm(this._confirmMsg)) return false; return true }, get_setupData: function() { return this._setupData }, set_setupData: function(a) { this._setupData = a }, get_parent: function() { return this._parent }, set_parent: function(a) { this._parent = a }, get_text: function() { return this._util.getFirstChild(this.get_element()).innerHTML }, set_text: function(a) { var b = this._util.getFirstChild(this.get_element()); var c = b.innerHTML; if (a.trim().length < 1) a = "&nbsp;"; b.innerHTML = a; if (c.toUpperCase() != a.toUpperCase()) this._saveChange("Text", a) }, get_index: function() { return this._index }, set_index: function(a) { this._index = a }, get_cssClass: function() { return this._css }, set_cssClass: function(a) { var b = this._css; this._css = a; this._swapClasses(b, a); if (this._css != b) this._saveChange("Css", a) }, get_cssClassEnabled: function() { return this._cssEnabled }, set_cssClassEnabled: function(a) { var b = this._cssEnabled; this._cssEnabled = a; if (this.get_enabled()) this._swapClasses(b, a); if (this._cssEnabled != b) this._saveChange("CssEnabled", a) }, get_cssClassDisabled: function() { return this._cssDisabled }, set_cssClassDisabled: function(a) { var b = this._cssDisabled; this._cssDisabled = a; this._swapClasses(b, a); if (this._cssDisabled != b) this._saveChange("CssDisabled", a) }, get_cssClassSelected: function() { return this._cssSelected }, set_cssClassSelected: function(a) { var b = this._cssSelected; this._cssSelected = a; this._swapClasses(b, a); if (this._cssSelected != b) this._saveChange("CssSelected", a) }, get_enabled: function() { return this._enabled }, set_enabled: function(a) { var b = this.get_enabled(); this._enabled = a; this._setEnabled(a); if (b != this._enabled) this._saveChange("Enabled", a) }, get_visible: function() { return Sys.UI.DomElement.getVisible(this.get_element()) }, set_visible: function(a) { var b = this.get_visible(); Sys.UI.DomElement.setVisible(this.get_element(), a); if (b != this.get_visible()) this._saveChange("Visible", a) }, get_selected: function() { return this._selected }, set_selected: function(a) { if (!this._enabled) { alert("Item cannot be selected because it is disabled."); return } var b = this._selected; this._parent.setItemSelected(this._index, a); if (b != this.get_selected()) this._saveChange("selected", a) }, get_imageUrl: function() { return this._imageUrl }, set_imageUrl: function(a) { var b = this._imageUrl; if (b != this.get_imageUrl()) this._saveChange("imageUrl", a) }, get_disabledImageUrl: function() { return this._disabledImageUrl }, set_disabledImageUrl: function(a) { var b = this._disabledImageUrl; if (b != this.get_disabledImageUrl()) this._saveChange("disabledImageUrl", a) } }; SCS.ToolbarButton.registerClass('SCS.ToolbarButton', Sys.UI.Behavior); SCS.ToolbarClickEventArgs = function(a, b) { SCS.ToolbarClickEventArgs.initializeBase(this); this._oldIndex = a; this._selectedIndex = b }; SCS.ToolbarClickEventArgs.prototype = { get_oldIndex: function() { return this._oldIndex }, set_oldIndex: function(a) { this._oldIndex = a }, get_selectedIndex: function() { return this._selectedIndex }, set_selectedIndex: function(a) { this._selectedIndex = a } }; SCS.ToolbarClickEventArgs.registerClass('SCS.ToolbarClickEventArgs', Sys.CancelEventArgs); SCS.Util = function() { }; SCS.Util.prototype = { getFirstChild: function(a) { a = a.firstChild; while (a && a.nodeType != 1) a = a.nextSibling; return a }, getNextSibling: function(a) { a = a.nextSibling; while (a && a.nodeType != 1) a = a.nextSibling; return a }, getSibling: function(a, b, c) { if (a == null) return null; b = b.toUpperCase(); for (var i = 0; i < c; i++) { a = a.nextSibling; if (a.nodeType == 3) a = a.nextSibling; if (a == null) break; if (a.tagName.toUpperCase() == b) return a } return null }, getProp: function(a, b, c) { var d; eval("try {val=obj." + b + "}catch(e){}"); return (typeof (d) != "undefined") ? d : c } }; if (typeof (Sys) !== 'undefined') Sys.Application.notifyScriptLoaded();